#!/bin/bash

# check/install/reinstall dns servers

# 20190415, joseph.tingiris@gmail.com

Dns_Dir=$(dirname $(dirname "$(readlink -e "$0")"))
Dns_Source="${Dns_Dir}/bin/dns"
if [ ! -r "${Dns_Source}" ]; then
    printf "\naborting, '${Dns_Source}' source file not readable\n\n"
    exit 2
fi
source "${Dns_Source}"

#
# Globals
#

#
# Functions
#

function usage() {
    printf "\nusage: $0 <check|install|headers|reinstall>\n\n"
    exit 1
}

#
# Main
#

if [ ${#1} -eq 0 ]; then
    usage
fi

Setup=1 # false

if [ "$1" == "check" ]; then
    ACTION="CHECK"
    Check=0
    Setup=0
else
    Check=1
fi

if [ "$1" == "install" ]; then
    Action="INSTALL"
    Install=0
    Setup=0
else
    Install=1
fi

if [ "$1" == "headers" ]; then
    Action="HEADERS"
    Headers=0
    Setup=0
else
    Headers=1
fi

if [ "$1" == "reinstall" ]; then
    Action="REINSTALL"
    Reinstall=0
    Setup=0
else
    Reinstall=1
fi

if [ $Setup -ne 0 ]; then
    usage
fi

cd "${Dns_Dir}"

#
# ensure primary/secondary configs are there & in sync
#

if [ $Install -eq 0 ] || [ $Reinstall -eq 0 ]; then
    if [ ! -r "${Dns_Dir}/etc/template/template.primary.conf" ]; then
        aborting "${Dns_Dir}/etc/template/template.primary.conf file not found"
    else
        sed "s#primary#secondary#g" "${Dns_Dir}/etc/template/template.primary.conf" > "${Dns_Dir}/etc/template/template.secondary.conf"
        if [ $? -ne 0 ]; then
            aborting "failed to sync ${Dns_Dir}/etc/template/template.secondary.conf"
        fi
    fi
fi

#
# change/check/create dns templates
#

Dns_Templates=()
Dns_Templates+=("${Dns_Dir}/etc/template/dns.conf")
for template in "${Dns_Dir}/etc/template/template."*; do
    Dns_Templates+=(${template})
done

echo

for Dns_Template in "${Dns_Templates[@]}"; do
    Dns_Named=${Dns_Template/template\//}
    Dns_Named=${Dns_Named/template/named}

    if [ -r "${Dns_Template}" ]; then

        if [ -r "${Dns_Named}" ]; then
            if [ $Reinstall -eq 0 ]; then
                dnsBackup "${Dns_Named}"
                dnsEcho "[BACKUP]: ${Dns_Named}"
                cp "${Dns_Template}" "${Dns_Named}"
                if [ $? -eq 0 ]; then
                    dnsEcho "[${Action}]: ${Dns_Named}"
                else
                    aborting "failed to cp ${Dns_Template} ${Dns_Named}"
                fi
            else
                dnsEcho "[FOUND]: ${Dns_Named}"
            fi
        else
            if [ $Install -eq 0 ] || [ $Reinstall -eq 0 ]; then
                cp "${Dns_Template}" "${Dns_Named}"
                if [ $? -eq 0 ]; then
                    dnsEcho "[${Action}]: ${Dns_Named}"
                else
                    aborting "failed to cp ${Dns_Template} ${Dns_Named}"
                fi
            else
                dnsEcho "[MISSING]: ${Dns_Named}"
            fi
        fi

    else
        dnsEcho "[MISSING]: ${Dns_Template} file not readable"
        aborting "bug"
    fi

    unset Dns_Named
done

if [ $Headers -eq 0 ]; then
    echo
    Header_Files=()
    Header_Files+=(${Dns_Templates[@]})
    for named in "${Dns_Dir}/etc/named."*; do
        Header_Files+=(${named})
    done

    for Header_File in "${Header_Files[@]}"; do
        Dns_Named=${Header_File/template\//}
        Dns_Named=${Dns_Named/template/named}

        if [ -w "${Header_File}" ] && [ ! -h "${Header_File}" ]; then
            dnsBackup "${Dns_Named}"

            dnsEcho "[HEADER]: ${Header_File}"
            if $(head -1 "${Header_File}" | grep ^\/\/  &> /dev/null); then
                if $(grep ^$ "${Header_File}" &> /dev/null); then
                    sed -i '1,/^$/d' "${Header_File}"
                fi
            fi
            if [ -s "${Header_File}" ] && [ ! -h "${Header_File}" ]; then
                sed -i "1s/^/\/\/\n\/\/ $(basename "${Dns_Named}")\n\/\/\n\n/" "${Header_File}"
            else
                if [ ! -s "${Header_File}" ] && [ ! -h "${Header_File}" ]; then
                    printf "//\n// $(basename "${Dns_Named}")\n//\n\n" > "${Header_File}"
                fi
            fi
        fi

        unset Dns_Named
    done
fi

echo

#
# change/check/create dns keys
#

Dns_Keys=()
Dns_Keys+=(rndc)
Dns_Keys+=(private.zone)
Dns_Keys+=(public.zone)

if [ $Reinstall -eq 0 ]; then
    Dns_Key_Args="--force"
else
    Dns_Key_Args=""
fi

for Dns_Key in ${Dns_Keys[@]}; do
    dns-key "${Dns_Key}" ${Dns_Key_Args}
done
