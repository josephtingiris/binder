#!/bin/bash

# check/install/reinstall dns servers

# 20190415, joseph.tingiris@gmail.com

Dns_Dir=$(dirname $(dirname "$(readlink -e "$0")"))
Dns_Source="${Dns_Dir}/bin/dns"
if [ ! -r "${Dns_Source}" ]; then
    printf "\naborting, '${Dns_Source}' source file not readable\n\n"
    exit 2
fi
source "${Dns_Source}"

#
# Globals
#

#
# Functions
#

function usage() {
    printf "\nusage: $0 <check|install|headers|reinstall> <primary|secondary>\n\n"
    exit 1
}

#
# Main
#

if [ ${#1} -eq 0 ] || [ ${#2} -eq 0 ]; then
    usage
fi

Setup=1 # false

if [ "$1" == "check" ]; then
    ACTION="CHECK"
    Check=0
    Setup=0
else
    Check=1
fi

if [ "$1" == "install" ]; then
    Action="INSTALL"
    Install=0
    Setup=0
else
    Install=1
fi

if [ "$1" == "headers" ]; then
    Action="HEADERS"
    Headers=0
    Setup=0
else
    Headers=1
fi

if [ "$1" == "reinstall" ]; then
    Action="REINSTALL"
    Reinstall=0
    Setup=0
else
    Reinstall=1
fi

Primary=1
Secondary=1

if [ "$2" != "primary" ] && [ "$2" != "secondary" ]; then
    Setup=1
else
    if [ "$2" == "primary" ]; then
        Primary=0
    else
        if [ "$2" == "secondary" ]; then
            Secondary=0
        fi
    fi
fi

if [ $Setup -ne 0 ]; then
    usage
fi

dnsEcho "DNS DIR = ${Dns_Dir}"

cd "${Dns_Dir}"

#
# ensure dns_dir is in sync with revision control system(s)
#

SVN_URL=$(svn info 2> /dev/null | grep ^URL: | awk '{print $2}')
if [ ${#SVN_URL} -gt 0 ]; then
    dnsEcho "SVN URL = ${SVN_URL}"
    echo
    svn status ${Dns_Dir} | grep .
    if [ $? -eq 0 ]; then
        echo
    fi
    if [ $Install -eq 0 ] || [ $Reinstall -eq 0 ]; then
        svn up
        echo
    fi
fi

GIT_URL=$(git remote -v 2> /dev/null | grep fetch | awk '{print $2}')
if [ ${#GIT_URL} -gt 0 ]; then
    dnsEcho "GIT URL = ${GIT_URL}"
    echo
    git status | grep Changes &> /dev/null
    if [ $? -eq 0 ]; then
        git status
        echo
    fi
    if [ $Install -eq 0 ] || [ $Reinstall -eq 0 ]; then
        git pull
        echo
    fi
fi

Named_Pid=$(ps -ef | grep named | grep -v grep | awk '{print $2}')
if [ ${#Named_Pid} -gt 0 ]; then
    if [ $Install -eq 0 ] || [ $Reinstall -eq 0 ]; then
        dnsEcho "[STOP]: named PID ${Named_Pid}"
        systemctl stop named
    else
        dnsEcho "[FOUND]: named PID ${Named_Pid}"
    fi
fi

if [ $Primary -eq 0 ]; then

    #
    # ensure primary/secondary configs are there & in sync
    #

    if [ $Install -eq 0 ] || [ $Reinstall -eq 0 ]; then
        if [ ! -r "${Dns_Dir}/etc/template/template.primary.conf" ]; then
            aborting "${Dns_Dir}/etc/template/template.primary.conf file not found"
        else
            sed "s#primary#secondary#g" "${Dns_Dir}/etc/template/template.primary.conf" > "${Dns_Dir}/etc/template/template.secondary.conf"
            if [ $? -ne 0 ]; then
                aborting "failed to sync ${Dns_Dir}/etc/template/template.secondary.conf"
            fi
        fi
    fi

    #
    # change/check/create dns templates
    #

    Dns_Templates=()
    Dns_Templates+=("${Dns_Dir}/etc/template/dns.conf")
    for template in "${Dns_Dir}/etc/template/template."*; do
        Dns_Templates+=(${template})
    done

    echo

    for Dns_Template in "${Dns_Templates[@]}"; do
        Dns_Named=${Dns_Template/template\//}
        Dns_Named=${Dns_Named/template/named}

        if [ -r "${Dns_Template}" ]; then

            if [ -r "${Dns_Named}" ]; then
                if [ $Install -eq 0 ] || [ $Reinstall -eq 0 ]; then
                    dnsBackup "${Dns_Named}"
                    dnsEcho "[BACKUP]: ${Dns_Named}"
                    cp "${Dns_Template}" "${Dns_Named}"
                    if [ $? -eq 0 ]; then
                        dnsEcho "[${Action}]: ${Dns_Named}"
                    else
                        aborting "failed to cp ${Dns_Template} ${Dns_Named}"
                    fi
                else
                    dnsEcho "[FOUND]: ${Dns_Named}"
                fi
            else
                if [ $Install -eq 0 ] || [ $Reinstall -eq 0 ]; then
                    cp "${Dns_Template}" "${Dns_Named}"
                    if [ $? -eq 0 ]; then
                        dnsEcho "[${Action}]: ${Dns_Named}"
                    else
                        aborting "failed to cp ${Dns_Template} ${Dns_Named}"
                    fi
                else
                    dnsEcho "[MISSING]: ${Dns_Named}"
                fi
            fi

        else
            dnsEcho "[MISSING]: ${Dns_Template} file not readable"
            aborting "bug"
        fi

        unset Dns_Named
    done

    if [ $Headers -eq 0 ]; then
        echo
        Header_Files=()
        Header_Files+=(${Dns_Templates[@]})
        for named in "${Dns_Dir}/etc/named."*; do
            Header_Files+=(${named})
        done

        for Header_File in "${Header_Files[@]}"; do
            Dns_Named=${Header_File/template\//}
            Dns_Named=${Dns_Named/template/named}

            if [ -w "${Header_File}" ] && [ ! -h "${Header_File}" ]; then
                dnsBackup "${Dns_Named}"

                dnsEcho "[HEADER]: ${Header_File}"
                if $(head -1 "${Header_File}" | grep ^\/\/  &> /dev/null); then
                    if $(grep ^$ "${Header_File}" &> /dev/null); then
                        sed -i '1,/^$/d' "${Header_File}"
                    fi
                fi
                if [ -s "${Header_File}" ] && [ ! -h "${Header_File}" ]; then
                    sed -i "1s/^/\/\/\n\/\/ $(basename "${Dns_Named}")\n\/\/\n\n/" "${Header_File}"
                else
                    if [ ! -s "${Header_File}" ] && [ ! -h "${Header_File}" ]; then
                        printf "//\n// $(basename "${Dns_Named}")\n//\n\n" > "${Header_File}"
                    fi
                fi
            fi

            unset Dns_Named
        done
    fi

    echo

    #
    # change/check/create dns keys
    #

    Dns_Keys=()
    Dns_Keys+=(rndc)
    Dns_Keys+=(private.zone)
    Dns_Keys+=(public.zone)

    if [ $Reinstall -eq 0 ]; then
        Dns_Key_Args="--force"
    else
        Dns_Key_Args=""
    fi

    for Dns_Key in ${Dns_Keys[@]}; do
        dns-key "${Dns_Key}" ${Dns_Key_Args}
    done

    if [ -f ${Dns_Dir}/etc/named.primary.conf ]; then

        if [ $Install -eq 0 ] || [ $Reinstall -eq 0 ]; then
            touch /etc/sysconfig/named
            sed -e '/^NAMEDCONF=/d' /etc/sysconfig/named
            echo "NAMEDCONFIG=${Dns_Dir}/etc/named.primary.conf" >> /etc/sysconfig/named
            rm -f /etc/named.conf &> /dev/null
            cp "${Dns_Dir}/etc/named.primary.conf" /etc/named.conf
            if [ $? -eq 0 ]; then
                dnsEcho "[UPDATED]: /etc/sysconfig/named"
            fi

        else
            dnsEcho "[FOUND]: named.primary.conf"
        fi

    fi

    # end Primary
fi

if [ $Secondary -eq 0 ]; then
    if [ -f ${Dns_Dir}/etc/named.secondary.conf ]; then

        if [ $Install -eq 0 ] || [ $Reinstall -eq 0 ]; then
            touch /etc/sysconfig/named
            sed -e '/^NAMEDCONF=/d' /etc/sysconfig/named
            echo "NAMEDCONFIG=${Dns_Dir}/etc/named.secondary.conf" >> /etc/sysconfig/named
            rm -f /etc/named.conf &> /dev/null
            cp "${Dns_Dir}/etc/named.secondary.conf" /etc/named.conf
            if [ $? -eq 0 ]; then
                dnsEcho "[UPDATED]: /etc/sysconfig/named"
            fi
        else
            dnsEcho "[FOUND]: named.secondary.conf"
        fi

    fi

    # end Secondary
fi

if [ -f ${Dns_Dir}/etc/named.shared.rndc.key ]; then
    if [ -f /etc/rndc.key ] || [ -h /etc/rndc.key ]; then
        if [ $Install -eq 0 ] || [ $Reinstall -eq 0 ]; then
            dnsBackup "/etc/rndc.key"
            dnsEcho "[BACKUP]: /etc/rndc.key"
            rm -f /etc/rndc.key
        else
            dnsEcho "[FOUND]: /etc/rndc.key"
        fi
    else
        dnsEcho "[MISSING]: /etc/rndc.key"
    fi

    if [ $Install -eq 0 ] || [ $Reinstall -eq 0 ]; then
        ln -s "${Dns_Dir}/etc/named.shared.rndc.key" "/etc/rndc.key"
        if [ $? -eq 0 ]; then
            dnsEcho "[LINKED]: /etc/rndc.key"
        fi
    else
        dnsEcho "[FOUND]: named.shared.rndc.key"
    fi
fi

if [ $Install -eq 0 ] || [ $Reinstall -eq 0 ]; then
    if [ ! -d "${Dns_Dir}/cache/zone/arpa" ]; then
        mkdir -p "${Dns_Dir}/cache/zone/arpa"
        if [ $? -eq 0 ]; then
            dnsEcho "[MKDIR]: ${DNS_DIR}/cache/zone/arpa"
        fi
    fi
    find "${Dns_Dir}/cache" -type f | egrep -e 'cache$|tmp' | xargs -r rm
fi

if [ -f "${Dns_Dir}/etc/profile.d/dns.sh" ]; then
    if [ $Install -eq 0 ] || [ $Reinstall -eq 0 ]; then
        cp -f "${Dns_Dir}/etc/profile.d/dns.sh" /etc/profile.d/dns.sh
        if [ $? -eq 0 ]; then
            dnsEcho "[COPIED]: ${DNS_DIR}/etc/profile.d/dns.sh"
        fi
    fi
fi

if [ $Install -eq 0 ] || [ $Reinstall -eq 0 ]; then
    if [ -w /etc/sysconfig/named ]; then
        dnsEcho "[UPDATE]: remove options from /etc/sysconfig/named"
        sed -i "/^OPTIONS/d" /etc/sysconfig/named
    fi

    if [ ${#SVN_URL} -gt 0 ]; then
        dnsEcho "[SVN]: permissions"
        svn perms &> /dev/null
        echo
    fi
fi

if [ $Install -eq 0 ] || [ $Reinstall -eq 0 ]; then
    dnsEcho "[START]: named"
    systemctl start named
    if [ $? -ne 0 ]; then
        journalctl -x -u named
    fi
fi

