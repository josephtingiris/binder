#!/bin/bash

# add/check/delete dns zones

# 20190408, joseph.tingiris@gmail.com

Dns_Dir=$(dirname $(dirname "$(readlink -e "$0")"))
Dns_Source="${Dns_Dir}/bin/dns"
if [ ! -r "${Dns_Source}" ]; then
    printf "\naborting, '${Dns_Source}' source file not readable\n\n"
    exit 2
fi
source "${Dns_Source}"

#
# Globals
#

Verbose_Level_Prefix=on

Dns_Actions=()
Dns_Actions+=(add)
Dns_Actions+=(check)
Dns_Actions+=(delete)
Dns_Actions+=(force)
Dns_Action_Valid=1

Dns_Views=()
Dns_Views+=(private)
Dns_Views+=(public)
Dns_View_Valid=1

Dns_Servers=()
Dns_Servers+=(primary)
Dns_Servers+=(secondary)
Dns_Servers+=(shared)
Dns_Server_Valid=1

Dns_Zone_Types=()
Dns_Zone_Types+=(forward)
Dns_Zone_Types+=(master)
Dns_Zone_Type_Valid=1

#
# Functions
#

function usage() {
    printf "\nusage: %s <action> <zone name> [server type] [view name] [zone type]\n\n" "${0}"

    if [ "${Dns_Actions}" != "" ]; then
        printf "supported actions:\n\n"
        let Dns_Action_Count=0
        for Dns_Action in ${Dns_Actions[@]}; do
            if [ ${Dns_Action_Count} -eq 0 ]; then
                printf "    ${Dns_Action}"
            else
                printf ", ${Dns_Action}"
            fi
            let Dns_Action_Count=${Dns_Action_Count}+1
        done
        printf "\n\n"
        unset Dns_Action
    fi

    if [ "${Dns_Servers}" != "" ]; then
        printf "supported server types:\n\n"
        let Dns_Server_Count=0
        for Dns_Server in ${Dns_Servers[@]}; do
            if [ ${Dns_Server_Count} -eq 0 ]; then
                printf "    ${Dns_Server}"
            else
                printf ", ${Dns_Server}"
            fi
            let Dns_Server_Count=${Dns_Server_Count}+1
        done
        printf "\n\n"
        unset Dns_Server
    fi

    if [ "${Dns_Views}" != "" ]; then
        printf "supported view names:\n\n"
        let Dns_View_Count=0
        for Dns_View in ${Dns_Views[@]}; do
            if [ ${Dns_View_Count} -eq 0 ]; then
                printf "    ${Dns_View}"
            else
                printf ", ${Dns_View}"
            fi
            let Dns_View_Count=${Dns_View_Count}+1
        done
        printf "\n\n"
        unset Dns_View
    fi

    if [ "${Dns_Zone_Types}" != "" ]; then
        printf "supported zone types:\n\n"
        let Dns_Zone_Type_Count=0
        for Dns_Zone_Type in ${Dns_Zone_Types[@]}; do
            if [ ${Dns_Zone_Type_Count} -eq 0 ]; then
                printf "    ${Dns_Zone_Type}"
            else
                printf ", ${Dns_Zone_Type}"
            fi
            let Dns_Zone_Type_Count=${Dns_Zone_Type_Count}+1
        done
        printf "\n\n"
        unset Dns_Zone_Type
    fi

    if [ ${#1} -ne 0 ]; then
        local usage_message="${@}"
        printf "NOTE: %s\n\n" "${usage_message}"
    fi
    exit 1
}

#
# Main
#

Warnings=()

#
# validate dns.conf
#

if [ -r /etc/dns.conf ]; then
    Dns_Conf="/etc/dns.conf"
else
    if [ -r ${Dns_Dir}/etc/dns.conf ]; then
        Dns_Conf="${Dns_Dir}/etc/dns.conf"
    else
        aborting "dns.conf file not readable"
    fi
fi

#
# validate /etc/named.conf
#

if [ ! -r "/etc/named.conf" ]; then
    aborting "ERROR: /etc/named.conf file not readable"
fi

if [ ${#1} -eq 0 ] || [ ${#2} -eq 0 ]; then
    usage
fi

#
# validate action
#

for Dns_Action in ${Dns_Actions[@]}; do
    if [ "${1,,}" == "${Dns_Action}" ]; then
        Dns_Action_Valid=0
        break
    fi
done

if [ ${Dns_Action_Valid} -eq 0 ]; then
    shift
else
    usage "invalid action '${1}'"
fi

verbose "Dns_Action=${Dns_Action}" ${Verbose_Level}

#
# validate zone name
#

declare -l Zone="$1"
Zone=$(echo "${Zone}" | sed -e 's#\.\.*#\.#g' -e 's#^\.##g' -e 's#\.$##g');
if [ ${#Zone} -gt 0 ]; then
    shift
else
    usage "invalid zone '${1}'"
fi

if [[ "${Zone}" =~ rpz$ ]]; then
    Origin="${Zone}"
    Soa=localhost
else
    Origin="${Zone}"
    Soa="${Zone}"
fi

if [[ "${Zone}" == *"arpa"* ]]; then
    Zone_Dir="zone/arpa"
else
    Zone_Dir="zone"
fi


if [ "${Zone}" != "dns.conf" ]; then

    #
    # validate server type
    #

    for Dns_Server in ${Dns_Servers[@]}; do
        if [ "${1,,}" == "${Dns_Server}" ]; then
            Dns_Server_Valid=0
            break
        fi
    done

    if [ ${Dns_Server_Valid} -eq 0 ]; then
        Servers=(${Dns_Server})
        shift
    else
        if [ ${#1} -eq 0 ]; then
            if [ "${Dns_Action}" == "check" ]; then
                Servers=(${Dns_Servers[@]})
            else
                Servers=(primary secondary)
            fi
        else
            if [ "${1}" == "primary" ] || [ "${1}" == "secondary" ] || [ "${1}" == "shared" ]; then
                Dns_Server="${1}"
                Servers=(${Dns_Server})
                shift
            else
                usage "invalid server '${1}'"
            fi
        fi
    fi

    unset Dns_Server

    verbose "Servers=${Servers[@]}" ${Verbose_Level}

    #
    # validate view name
    #

    for Dns_View in ${Dns_Views[@]}; do
        if [ "${1,,}" == "${Dns_View}" ]; then
            Dns_View_Valid=0
            break
        fi
    done

    if [ ${Dns_View_Valid} -eq 0 ]; then
        Views=(${Dns_View})
        shift
    else
        if [ ${#1} -eq 0 ]; then
            Views=(${Dns_Views[@]})
        else
            usage "invalid view '${1}'"
        fi
    fi

    unset Dns_View

    verbose "Views=${Views[@]}" ${Verbose_Level}

    #
    # validate zone type
    #

    for Dns_Zone_Type in ${Dns_Zone_Types[@]}; do
        if [ "${1,,}" == "${Dns_Zone_Type}" ]; then
            Dns_Zone_Type_Valid=0
            break
        fi
    done

    if [ ${Dns_Zone_Type_Valid} -eq 0 ]; then
        Zone_Types=(${Dns_Zone_Type})
        shift
    else
        if [ ${#1} -eq 0 ]; then
            if [ "${Dns_Action}" == "check" ]; then
                Zone_Types=(${Dns_Zone_Types[@]})
            else
                Zone_Types=(master)
            fi
        else
            if [ "${1}" == "forward" ] || [ "${1}" == "master" ]; then
                Dns_Zone_Type="${1}"
                Zone_Types=(${Dns_Zone_Type})
                shift
            else
                usage "invalid zone type '${1}'"
            fi
        fi
    fi

    unset Dns_Zone_Type

    verbose "Zone_Types=${Zone_Types[@]}" ${Verbose_Level}

fi

#
# set dynamic variable values
#

Printf_Pad=65
Serial="$(date +%Y%m%d)01"

#
# create zone dirs
#

if [ "${Dns_Action}" == "add" ] || [ "${Dns_Action}" == "force" ]; then
    if [ ! -d "${Dns_Dir}/${Zone_Dir}" ]; then
        mkdir -p "${Dns_Dir}/${Zone_Dir}"
        if [ $? -ne 0 ]; then
            aborting "failed to mkdir ${Dns_Dir}/${Zone_Dir}"
        fi
    fi
    if [ ! -d "${Dns_Dir}/cache/${Zone_Dir}" ]; then
        mkdir -p "${Dns_Dir}/cache/${Zone_Dir}"
        if [ $? -ne 0 ]; then
            aborting "failed to mkdir ${Dns_Dir}/cache/${Zone_Dir}"
        fi
    fi
fi

#
# experimental
#

if [ "${Zone}" == "dns.conf" ]; then

    # this allows an extra (undocumented) argument (for dns.conf searches)
    if [ ${#1} -eq 0 ]; then
        GREP="."
    else
        GREP="${1}"
    fi

    while read Dns_Zone_Line; do

        verbose "Dns_Zone_Line=${Dns_Zone_Line}" $((${Verbose_Level}+10))

        declare -l Dns_Zone_Arpa
        Dns_Zone_Arpa=$(echo "${Dns_Zone_Line}" | awk -F, '{print $1}')
        if [ "${Dns_Zone_Arpa}" == "*" ] || [ "${Dns_Zone_Arpa,,}" == "default" ]; then
            Dns_Zone_Arpa=""
        fi
        verbose "Dns_Zone_Arpa=${Dns_Zone_Arpa}" $((${Verbose_Level}+10))

        declare -l Dns_Zone
        if [ ${#Dns_Zone_Arpa} -gt 0 ]; then
            Dns_Zone=${Dns_Zone_Arpa}
        else
            Dns_Zone=$(echo "${Dns_Zone_Line}" | awk -F, '{print $2}')
            if [ "${Dns_Zone}" == "*" ] || [ "${Dns_Zone,,}" == "default" ]; then
                Dns_Zone=""
            fi
        fi
        verbose "Dns_Zone='${Dns_Zone}'" $((${Verbose_Level}+10))

        if [ ${#Dns_Zone} -eq 0 ] && [ ${#Dns_Zone_Arpa} -gt 0 ]; then
            Dns_Zone=${Dns_Zone_Arpa}
        fi

        if [ ${#Dns_Zone} -eq 0 ]; then
            aborting "dns.conf zone '${Dns_Zone_Arpa}' '${GREP}' is empty"
        fi

        declare -l Dns_Zone_View
        Dns_Zone_View=$(echo "${Dns_Zone_Line}" | awk -F, '{print $3}')

        verbose "Dns_Zone_View='${Dns_Zone_View}'" $((${Verbose_Level}+10))

        if [ "${Dns_Zone_View}" == "forward" ]; then
            Dns_Servers=(shared)
            Dns_Zone_View="private"
            Dns_Zone_Type="forward"
        else
            Dns_Servers=(primary secondary)
            Dns_Zone_Type="master"
        fi

        for Dns_Server in ${Dns_Servers[@]}; do
            $0 "${Dns_Action}" "${Dns_Zone}" "${Dns_Server}" "${Dns_Zone_View}" "${Dns_Zone_Type}"
            if [ $? -ne 0 ]; then
                if [ "${Dns_Action}" != "check" ]; then
                    aborting "dns zone '${Dns_Zone}', view '${Dns_Zone_View}', failed $0 ${Dns_Action}"
                fi
            fi
        done

        echo
    done <<< "$(grep ^Dns_Zone= "${Dns_Conf}" 2> /dev/null | grep ${GREP} | awk -F= '{print $NF}' | awk -F"#" '{print $1}' | sed -e '/[[:space:]]/s///g' | sort)"

    exit
fi

#
# dns-zones logic
#

for Zone_Type in ${Zone_Types[@]}; do

    for Server in ${Servers[@]}; do

        for View in ${Views[@]}; do

            #printf "\n"
            #printf "Zone = ${Zone},"
            #printf " Zone_Dir = ${Zone_Dir},"
            #printf " Action = ${Dns_Action},"
            #printf " Server = ${Server},"
            #printf " View = ${View},"
            #printf " Zone_Type = ${Zone_Type},"
            #printf " Origin = ${Origin},"
            #printf " Soa = ${Soa}"
            #printf "\n\n"


            #
            # process primary & secondary zone configs
            #


            Template_Zones_Conf="${Dns_Dir}/etc/template/stencil.${Server}.${View}.${Zone_Type}.zones.conf"
            Zones_Conf_Basename="named.${Server}.${View}.${Zone_Type}.zones.conf"
            Zones_Conf="${Dns_Dir}/etc/${Zones_Conf_Basename}"

            Zones_Conf_Exists=1 # false

            if [ ! -r "${Template_Zones_Conf}" ]; then
                dnsAlert "ALERT: ${Template_Zones_Conf}' file not readable\n"
                if [ "${Dns_Action}" != "check" ]; then
                    continue
                fi
            fi

            if [ -f "${Zones_Conf}" ]; then
                if [ ! -w "${Zones_Conf}" ]; then
                    dnsAlert "ALERT: ${Zones_Conf}' file not writable\n"
                    if [ "${Dns_Action}" != "check" ]; then
                        continue
                    fi
                fi

                if grep "^[[:space:]]*zone[[:space:]]\"${Zone}\"" "${Zones_Conf}" &> /dev/null; then
                    Zones_Conf_Exists=0 # true
                else
                    Zones_Conf_Exists=1 # false
                fi
            fi

            if [ ${Zones_Conf_Exists} -eq 0 ]; then
                if [ "${Dns_Action}" != "delete" ]; then
                    #dnsEcho "[EXISTS]:[${Server}][${View}]=(${Zone}) ${Zones_Conf}"
                    dnsEcho "[${Zone}][${Dns_Action}][${Server}][${View}]:${Zones_Conf_Basename}=EXISTS"
                fi

                if [ "${Dns_Action}" == "add" ] || [ "${Dns_Action}" == "delete" ] || [ "${Dns_Action}" == "force" ]; then
                    if dnsBackup "${Zones_Conf}"; then
                        #dnsEcho "[BACKUP]:[${Server}][${View}]=(${Zone}) ${Zones_Conf}"
                        dnsEcho "[${Zone}][${Dns_Action}][${Server}][${View}]:${Zones_Conf_Basename}=BACKUP"
                    fi
                fi
            else
                if [ "${Dns_Action}" != "add" ]; then
                    #dnsEcho "[NOT FOUND]:[${Server}][${View}]=(${Zone}) ${Zones_Conf}"
                    dnsEcho "[${Zone}][${Dns_Action}][${Server}][${View}]:${Zones_Conf_Basename}=NOT FOUND"
                fi
            fi

            if [ "${Dns_Action}" == "delete" ] || [ "${Dns_Action}" == "force" ]; then
                if [ $Zones_Conf_Exists -eq 0 ]; then
                    Add_Rc=0
                    [ $Add_Rc -eq 0 ] && sed -i "/^zone[[:space:]]\"${Zone}\"/,/^};$/d" "${Zones_Conf}"
                    Add_Rc=$?
                    [ $Add_Rc -eq 0 ] && sed -i '/^$/N;/^\n$/D' "${Zones_Conf}"
                    Add_Rc=$?
                    [ $Add_Rc -eq 0 ] && sed -i -e '1{/^[[:space:]]*$/d}' -e '${/^[[:space:]]*$/d}' "${Zones_Conf}"
                    Add_Rc=$?
                    [ $Add_Rc -eq 0 ] && sed -i -e '1{/^$/d}' -e '${/^$/d}' "${Zones_Conf}"
                    Add_Rc=$?
                    if [ $Add_Rc -eq 0 ]; then
                        dnsEcho "[${Zone}][${Dns_Action}][${Server}][${View}]:${Zones_Conf_Basename}=REMOVE"
                        Zones_Conf_Exists=1
                    else
                        aborting "failed to remove '${Zone}' from ${Zones_Conf}"
                    fi
                fi
            fi

            if [ "${Dns_Action}" == "add" ] || [ "${Dns_Action}" == "force" ]; then

                #
                # get forward servers
                #

                if [ "${Zone_Type}" == "forward" ]; then
                    Dns_Zone_Config=$(dnsZoneConfig "${Zone}")
                    if [ ${#Dns_Zone_Config} -eq 0 ]; then
                        dnsEcho "[${Zone}][${Dns_Action}][${Server}][${View}]:$(basename ${Template_Zones_Conf})=CONFIG MISSING"
                        aborting
                    fi
                    Zone_Server=$(echo "$Dns_Zone_Config" | awk -F, '{print $4}' | sed -e "s#;#; #g")
                    if [ ${#Zone_Server} -eq 0 ]; then
                        dnsEcho "[${Zone}][${Dns_Action}][${Server}][${View}]:$(basename ${Template_Zones_Conf})=SERVER MISSING"
                        aborting
                    fi
                fi

                if [ ${Zones_Conf_Exists} -eq 1 ]; then
                    #dnsEcho "[TEMPLATE]:[${Server}][${View}]=(${Zone}) ${Template_Zones_Conf}"
                    dnsEcho "[${Zone}][${Dns_Action}][${Server}][${View}]:$(basename ${Template_Zones_Conf})=TEMPLATE"

                    Add_Rc=0
                    [ $Add_Rc -eq 0 ] && echo >> "${Zones_Conf}"
                    Add_Rc=$?
                    [ $Add_Rc -eq 0 ] && sed -e "s#++ORIGIN++#${Origin}#g" -e "s#++SERIAL++#${Serial}#g" -e "s#++SERVER++#${Zone_Server}#g" -e "s#++SOA++#${Soa}#g" -e "s#++VIEW++#${View}#g" -e "s#++ZONE++#${Zone}#g" -e "s#++ZONE_DIR++#${Zone_Dir}#g" "${Template_Zones_Conf}" >> "${Zones_Conf}"
                    if [ "${Comment}" != "" ]; then
                        [ $Add_Rc -eq 0 ] && sed -i -e "s#++COMMENT++#// ${Comment}#g" ${Zones_Conf}
                    else
                        [ $Add_Rc -eq 0 ] && sed -i -e "s#++COMMENT++##g" ${Zones_Conf}
                    fi
                    Add_Rc=$?
                    [ $Add_Rc -eq 0 ] && sed -i '/^$/N;/^\n$/D' "${Zones_Conf}"
                    Add_Rc=$?
                    [ $Add_Rc -eq 0 ] && sed -i -e "s/;[[:space:]][[:space:]]*/; /g" "${Zones_Conf}"
                    Add_Rc=$?
                    [ $Add_Rc -eq 0 ] && sed -i -e '1{/^[[:space:]]*$/d}' -e '${/^[[:space:]]*$/d}' "${Zones_Conf}"
                    Add_Rc=$?
                    [ $Add_Rc -eq 0 ] && sed -i -e '1{/^$/d}' -e '${/^$/d}' "${Zones_Conf}"
                    Add_Rc=$?
                    if [ $Add_Rc -eq 0 ]; then
                        #dnsEcho "[ADD]:[${Server}][${View}]=(${Zone}) ${Zones_Conf}"
                        dnsEcho "[${Zone}][${Dns_Action}][${Server}][${View}]:${Zones_Conf_Basename}=ADD"
                        Zones_Conf_Exists=0
                    else
                        aborting "failed to add '${Zone}' to ${Zones_Conf}"
                    fi
                fi
            fi


            #
            # process primary zone file
            #


            Zone_File_Exists=1 # false

            if [ "${Server}" == "primary" ] && [ "${Zone_Type}" == "master" ]; then

                Template_Zone_File="${Dns_Dir}/etc/template/stencil.${Server}.${View}.${Zone_Type}.zone"
                Zone_File_Basename="${Zone}.${View}.zone"
                Zone_File="${Dns_Dir}/${Zone_Dir}/${Zone_File_Basename}"

                if [ ! -r "${Template_Zone_File}" ]; then
                    dnsAlert "ALERT: ${Template_Zone_File}' file not readable\n"
                    if [ "${Dns_Action}" != "check" ]; then
                        continue
                    fi
                fi

                if [ -f "${Zone_File}" ] && [ ! -w "${Zone_File}" ]; then
                    dnsAlert "ALERT: ${Zone_File}' file not writable\n"
                    if [ "${Dns_Action}" != "check" ]; then
                        continue
                    fi
                else
                    if [ -s "${Zone_File}" ]; then
                        Zone_File_Exists=0 # true
                    else
                        Zone_File_Exists=1 # false
                    fi
                fi

                if [ ${Zone_File_Exists} -eq 0 ]; then
                    if [ "${Dns_Action}" != "delete" ]; then
                        #dnsEcho "[EXISTS]:[${Server}][${View}]=(${Zone}) ${Zone_File}"
                        dnsEcho "[${Zone}][${Dns_Action}][${Server}][${View}]:${Zone_File_Basename}=EXISTS"
                    fi

                    if [ "${Dns_Action}" == "add" ] || [ "${Dns_Action}" == "delete" ] || [ "${Dns_Action}" == "force" ]; then
                        if dnsBackup "${Zone_File}"; then
                            #dnsEcho "[BACKUP]:[${Server}][${View}]=(${Zone}) ${Zone_File}"
                            dnsEcho "[${Zone}][${Dns_Action}][${Server}][${View}]:${Zone_File_Basename}=BACKUP"
                        fi
                    fi
                else
                    if [ "${Dns_Action}" != "add" ]; then
                        #dnsEcho "[NOT FOUND]:[${Server}][${View}]=(${Zone}) ${Zone_File}"
                        dnsEcho "[${Zone}][${Dns_Action}][${Server}][${View}]:${Zone_File_Basename}=NOT FOUND"
                    fi
                fi

                if [ "${Dns_Action}" == "delete" ] || [ "${Dns_Action}" == "force" ]; then
                    if [ $Zone_File_Exists -eq 0 ]; then
                        rm -f "${Zone_File}"
                        if [ $? -eq 0 ]; then
                            #dnsEcho "[REMOVE]:[${Server}][${View}]=(${Zone}) ${Zone_File}"
                            dnsEcho "[${Zone}][${Dns_Action}][${Server}][${View}]:${Zone_File_Basename}=REMOVE"
                            Zone_File_Exists=1
                        else
                            aborting "failed to remove '${Zone_File}'"
                        fi
                    fi
                fi

                if [ "${Dns_Action}" == "add" ] || [ "${Dns_Action}" == "force" ]; then
                    if [ ${Zone_File_Exists} -eq 1 ]; then
                        #dnsEcho "[TEMPLATE]:[${Server}][${View}]=(${Zone}) ${Template_Zone_File}"
                        dnsEcho "[${Zone}][${Dns_Action}][${Server}][${View}]:$(basename ${Template_Zone_File})=TEMPLATE"

                        Add_Rc=0
                        [ $Add_Rc -eq 0 ] && sed -e "s#++ORIGIN++#${Origin}#g" -e "s#++SERIAL++#${Serial}#g" -e "s#++SOA++#${Soa}#g" -e "s#++VIEW++#${View}#g" -e "s#++ZONE++#${Zone}#g" -e "s#++ZONE_DIR++#${Zone_Dir}#g" "${Template_Zone_File}" >> "${Zone_File}"
                        if [ "${Comment}" != "" ]; then
                            [ $Add_Rc -eq 0 ] && sed -i -e "s#++COMMENT++#// ${Comment}#g" ${Zone_File}
                        else
                            [ $Add_Rc -eq 0 ] && sed -i -e "s#++COMMENT++##g" ${Zone_File}
                        fi
                        Add_Rc=$?
                        if [ $Add_Rc -eq 0 ]; then
                            #dnsEcho "[CREATE]:[${Server}][${View}]=(${Zone}) ${Zone_File}"
                            dnsEcho "[${Zone}][${Dns_Action}][${Server}][${View}]:${Zone_File_Basename}=CREATE"
                            Zone_File_Exists=0
                        else
                            aborting "failed to create '${Zone_File}"
                        fi
                    fi
                fi


                #
                # check & alert for zone file error conditions
                #


                if [ ${Zones_Conf_Exists} -eq 0 ] && [ ${Zone_File_Exists} -eq 1 ]; then
                    Warnings+=("entry for '${Zone}' exists in zones config '${Zones_Conf}', but zone file '${Zone_File}' does NOT exist")
                fi

            else


                #
                # check & alert for error conditions
                #


                if [ ${Zones_Conf_Exists} -eq 0 ] && [ ${#Warnings} -ne 0 ]; then
                    Warnings+=("entry for '${Zone}' exists in zones config '${Zones_Conf}'")
                fi

            fi


            #
            # process primary & secondary response-policy configs
            #


            Response_Policy_Conf_Exists=1

            if [[ "${Zone}" =~ rpz$ ]]; then
                Response_Policy_Conf_Basename="named.${Server}.${View}.response-policy.conf"
                Response_Policy_Conf="${Dns_Dir}/etc/${Response_Policy_Conf_Basename}"

                if [ -f "${Response_Policy_Conf}" ] && [ ! -w "${Response_Policy_Conf}" ]; then
                    aborting "'${Response_Policy_Conf}' file not writable\n"
                fi

                if [ -f "${Response_Policy_Conf}" ]; then
                    if grep "^[[:space:]]*zone[[:space:]]\"${Zone}\"" "${Response_Policy_Conf}" &> /dev/null; then
                        Response_Policy_Conf_Exists=0 # true
                    else
                        Response_Policy_Conf_Exists=1 # false
                    fi
                fi

                if [ $Response_Policy_Conf_Exists -eq 0 ]; then
                    if [ "${Dns_Action}" != "delete" ]; then
                        #dnsEcho "[EXISTS]:[${Server}][${View}]=(${Zone}) ${Response_Policy_Conf}"
                        dnsEcho "[${Zone}][${Dns_Action}][${Server}][${View}]:${Response_Policy_Conf_Basename}=EXISTS"
                    fi

                    if [ "${Dns_Action}" == "add" ] || [ "${Dns_Action}" == "delete" ] || [ "${Dns_Action}" == "force" ]; then
                        if dnsBackup "${Response_Policy_Conf}"; then
                            #dnsEcho "[BACKUP]:[${Server}][${View}]=(${Zone}) ${Response_Policy_Conf}"
                            dnsEcho "[${Zone}][${Dns_Action}][${Server}][${View}]:${Response_Policy_Conf_Basename}=BACKUP"
                        fi
                    fi
                else
                    if [ "${Dns_Action}" != "add" ]; then
                        #dnsEcho "[NOT FOUND]:[${Server}][${View}]=(${Zone}) ${Response_Policy_Conf}"
                        dnsEcho "[${Zone}][${Dns_Action}][${Server}][${View}]:${Response_Policy_Conf_Basename}=NOT FOUND"
                    fi
                fi

                if [ ! -f "${Response_Policy_Conf}" ] && [ $Response_Policy_Conf_Exists -eq 1 ]; then
                    printf "response-policy {\nzone \"${Zone}\";\n};" > "${Response_Policy_Conf}"
                    if [ $? -eq 0 ]; then
                        #dnsEcho "[CREATE]:[${Server}][${View}]=(${Zone}) ${Response_Policy_Conf}"
                        dnsEcho "[${Zone}][${Dns_Action}][${Server}][${View}]:${Response_Policy_Conf_Basename}=CREATE"
                    else
                        aborting "failed to create '${Response_Policy_Conf}'"
                    fi
                fi

                if [ "${Dns_Action}" == "delete" ] || [ "${Dns_Action}" == "force" ]; then
                    if [ $Response_Policy_Conf_Exists -eq 0 ]; then
                        Add_Rc=0
                        [ $Add_Rc -eq 0 ] && sed -i "/^[[:space:]]*zone[[:space:]]\"${Zone}\"/d" "${Response_Policy_Conf}"
                        Add_Rc=$?
                        [ $Add_Rc -eq 0 ] && sed -i '/^$/N;/^\n$/D' "${Response_Policy_Conf}"
                        Add_Rc=$?
                        [ $Add_Rc -eq 0 ] && sed -i -e '1{/^[[:space:]]*$/d}' -e '${/^[[:space:]]*$/d}' "${Response_Policy_Conf}"
                        Add_Rc=$?
                        [ $Add_Rc -eq 0 ] && sed -i -e '1{/^$/d}' -e '${/^$/d}' "${Response_Policy_Conf}"
                        Add_Rc=$?
                        if [ $Add_Rc -eq 0 ]; then
                            #dnsEcho "[REMOVE]:[${Server}][${View}]=(${Zone}) ${Response_Policy_Conf}"
                            dnsEcho "[${Zone}][${Dns_Action}][${Server}][${View}]:${Response_Policy_Conf_Basename}=REMOVE"
                            Response_Policy_Conf_Exists=1
                        else
                            aborting "failed to remove '${Zone}' from ${Response_Policy_Conf}"
                        fi
                    fi
                fi

                if [ "${Dns_Action}" == "add" ] || [ "${Dns_Action}" == "force" ]; then
                    if [ $Response_Policy_Conf_Exists -eq 1 ]; then
                        Add_Rc=0
                        [ $Add_Rc -eq 0 ] && sed -i -e "/^[[:space:]]*response-policy[[:space:]].*/s//response-policy\ \{\n\ \ \ \ zone\ \"${Zone}\";/g" "${Response_Policy_Conf}"
                        [ $Add_Rc -eq 0 ] && sed -i '/^$/N;/^\n$/D' "${Response_Policy_Conf}"
                        Add_Rc=$?
                        [ $Add_Rc -eq 0 ] && sed -i -e '1{/^[[:space:]]*$/d}' -e '${/^[[:space:]]*$/d}' "${Response_Policy_Conf}"
                        Add_Rc=$?
                        [ $Add_Rc -eq 0 ] && sed -i -e '1{/^$/d}' -e '${/^$/d}' "${Response_Policy_Conf}"
                        Add_Rc=$?
                        if [ $Add_Rc -eq 0 ]; then
                            #dnsEcho "[ADD]:[${Server}][${View}]=(${Zone}) ${Response_Policy_Conf}"
                            dnsEcho "[${Zone}][${Dns_Action}][${Server}][${View}]:${Response_Policy_Conf_Basename}=ADD"
                            Response_Policy_Conf_Exists=0 # true
                        else
                            aborting "failed to add '${Zone}' to ${Zones_Conf}"
                        fi
                    fi
                fi


                #
                # check & alert for response-policy error conditions
                #


                if [ ${Zones_Conf_Exists} -eq 0 ] && [ ${Response_Policy_Conf_Exists} -eq 1 ]; then
                    Warnings+=("entry for '${Zone}' exists in zones config '${Zones_Conf}', but zone entry in '${Response_Policy_Conf}' does NOT exist")
                fi

            fi


            #
            # named-checkconf, once, for every primary record
            #


            if [ "${Server}" == "primary" ] && [ "${Zone_Type}" == "master" ]; then
                Zone_Status=$(named-checkzone "${Zone}" "${Zone_File}" 2>&1 | tr '\n' ' ')
                if [ ${#Zone_Status} -eq 0 ] || [ "${Zone_Status}" == "" ] || [ ! -r "${Zone_File}" ]; then
                    #dnsEcho "[STATUS]:[${Server}][${View}]=(${Zone}) NOT LOADED"
                    dnsEcho "[${Zone}][${Dns_Action}][${Server}][${View}]:STATUS=NOT LOADED"
                else
                    #dnsEcho "[STATUS]:[${Server}][${View}]=(${Zone}) ${Zone_Status}"
                    dnsEcho "[${Zone}][${Dns_Action}][${Server}][${View}]:STATUS=${Zone_Status}"
                fi
            fi

            # Views
        done

        # Servers
    done

    # Zone_Types
done

rc=0

# meh ...
svn perms "${Dns_Dir}" &> /dev/null

if [ ${#Warnings} -gt 0 ]; then
    printf "\n"
    for Warning in "${Warnings[@]}"; do
        dnsAlert "WARNING: $Warning"
    done
    printf "\n"

    rc=3
fi

exit $rc
